[[model]]
name: maleckar-2008
desc: """
Model of the human atrial action potential by Maleckar et al. [1], based on the
earlier model by Nygren et al. [2].

This implementation was adapted from the CellML version by Catherine Lloyd.

The stimulus was set to 0.5[ms] and approximately twice the threshold value for
depolarisation.

[1] Mathematical simulations of ligand-gated and cell-type specific effects on
    the action potential of human atrium.
    M.M. Maleckar, J.L. Greenstein, N.A. Trayanova, and W.R. Giles
    2008, Progress in biophysics and molecular biology 98, no. 2-3: 161-170.
    https://doi.org/10.1016/j.pbiomolbio.2009.01.010

[2] Mathematical Model of an Adult Human Atrial Cell: The Role of K+ Currents
    in Repolarization.
    A. Nygren, C. Fiset, L. Firek, J.W. Clark, D.S. Lindblad, R.B. Clark and
    W.R. Giles.
    1998, Circulation Research, 82, 63-81.
    https://doi.org/10.1161/01.RES.82.1.63
"""
# Initial values
membrane.V    = -7.90921523973033374e+01
ina.m         =  1.77825203729624760e-03
ina.h1        =  9.48700847980166961e-01
ina.h2        =  9.46014668541888426e-01
ical.d        =  5.64642536687143402e-06
ical.f1       =  9.99310765540840862e-01
ical.f2       =  9.99303847866119588e-01
it.r          =  6.88038485853155642e-04
it.s          =  9.66253093184710199e-01
ikur.a_ur     =  2.03824702933088167e-04
ikur.i_ur     =  9.72332256324594968e-01
iks.n         =  4.11883288303283111e-03
ikr.pa        =  2.30720278907202767e-05
intra.K_i     =  1.32397938942944904e+02
intra.Na_i    =  5.83979345765281188e+00
intra.Ca_i    =  1.74762752024044035e-05
intra.Ca_d    =  1.98412925087431101e-05
cabuf.O_C     =  7.29183626464649862e-03
cabuf.O_TC    =  3.48448050022053023e-03
cabuf.O_TMgC  =  6.15263449467336396e-02
cabuf.O_TMgMg =  8.28159226043585828e-01
cabuf.O       =  1.35997383626409296e+00
cleft.Ca_c    =  1.80880625448206844e+00
cleft.K_c     =  5.76542443962233975e+00
cleft.Na_c    =  1.30033034739768794e+02
casr.F1       =  5.07508713571254599e-01
casr.F2       =  2.78363964104492141e-05
casr.O_Calse  =  1.72654941937748607e-01
casr.Ca_up    =  1.77369715074363055e-01
casr.Ca_rel   =  1.73931487812119812e-01


#
# Simulation engine / environment
#
[engine]
time = 0 [s]
    bind time
    in [s]
pace = 0
    bind pace


#
# Membrane potential
#
[membrane]
I = (
        + ina.i_Na
        + ical.i_Ca_L
        + it.i_t
        + ikur.i_Kur
        + ik1.i_K1
        + ikr.i_Kr
        + iks.i_Ks
        + ib.i_B_Na
        + ib.i_B_Ca
        + inak.i_NaK
        + icap.i_CaP
        + inaca.i_NaCa
        + ikach.i_KACh
    ) / cell.Cm
    in [pA/pF]
    label cellular_current
dot(V) = -(I + stimulus.i_Stim + i_diff) * 1000 [ms/s]
    in [mV]
    label membrane_potential
i_diff = 0 [A/F]
    in [A/F]
    bind diffusion_current


#
# Cell parameters
#
[cell]
Cm = 50 [pF]
    in [pF]
    label membrane_capacitance


#
# Stimulus current
#
[stimulus]
i_Stim = engine.pace * amplitude
    in [pA/pF]
    label stimulus_current
amplitude = 2 * -66.34 [pA/pF]
    in [pA/pF]
    desc: """
        Under baseline conditions, at 1Hz with a 0.5ms stimulus, -66.34 pA is
        approximately the smallest value that triggers three successive APs.
        """


#
# ACh-dependent potassium current
#
[ikach]
use membrane.V, nernst.E_K
ACh = 1e-24 [mM]
    in [mM]
i_KACh = 10 [S/mF] / (1 + 9.13652 / (ACh * 1 [1 /mM]) ^ 0.477811) * (0.0517 + 0.4516 / (1 + exp((V + 59.53 [mV]) / 17.18 [mV]))) * (V - E_K) * cell.Cm
    in [pA]

#
# Calcium-independent transient outward potassium current
#
[it]
use membrane.V, nernst.E_K
dot(r) = (r_infinity - r) / tau_r
    r_infinity = 1 / (1 + exp((V - 1 [mV]) / -11 [mV]))
    tau_r = 0.0035 [s] * exp(-V * V / 30 [mV] / 30 [mV]) + 0.0015 [s]
        in [s]
dot(s) = (s_infinity - s) / tau_s
    s_factor = (membrane.V + 52.45 [mV]) / 15.8827 [mV]
    s_infinity = 1 / (1 + exp((V + 40.5 [mV]) / 11.5 [mV]))
    tau_s = 0.025635 [s] * exp(-s_factor * s_factor) + 0.01414 [s]
        in [s]
g_t = 8.25 [nS]
    in [nS]
i_t = g_t * r * s * (V - E_K)
    in [pA]
    label I_to

#
# L-type calcium current
#
[ical]
use membrane.V
d_factor = (V + 35 [mV]) / 30 [mV]
f_factor = V + 40 [mV]
    in [mV]
f_inf = 1 / (1 + exp((V + 27.4 [mV]) / 7.1 [mV]))
dot(d) = (inf - d) / tau
    inf = 1 / (1 + exp((V + 9 [mV]) / -5.8 [mV]))
    tau = 0.0027 [s] * exp(-d_factor * d_factor) + 0.002 [s]
        in [s]
dot(f1) = (f_inf - f1) / tau
    tau = 0.161 [s] * exp(-f_factor * f_factor / 14.4 [mV] / 14.4 [mV]) + 0.01 [s]
        in [s]
dot(f2) = (f_inf - f2) / tau
    tau = 1.3323 [s] * exp(-f_factor * f_factor / 14.2 [mV] / 14.2 [mV]) + 0.0626 [s]
        in [s]
fCa = intra.Ca_d / (intra.Ca_d + k_Ca)
    k_Ca = 0.025 [mM]
        in [mM]
E_Ca_app = 60 [mV]
    in [mV]
scaling = 1
    label I_CaL_scaling
g_Ca_L = 6.75 [nS]
    in [nS]
i_Ca_L = scaling * g_Ca_L * d * (fCa * f1 + (1 - fCa) * f2) * (V - E_Ca_app)
    in [pA]
    label I_CaL

#
# Sodium-calcium exchanger current
#
[inaca]
use phys.RTF
use membrane.V
use intra.Na_i, intra.Ca_i
use cleft.Na_c, cleft.Ca_c
K_NaCa = 0.0374842 [m^12*A/mol^4 (1e-12)]
    in [m^12*A/mol^4 (1e-12)]
d_NaCa = 0.0003 [m^12/mol^4]
    in [m^12/mol^4]
gamma = 0.45
i_NaCa = K_NaCa * (Na_i^3 * Ca_c * exp(V * gamma / RTF) - Na_c^3 * Ca_i * exp((gamma - 1) * V / RTF)) / (1 + d_NaCa * (Na_c^3 * Ca_i + Na_i^3 * Ca_c))
    in [pA]
    label I_NaCa

#
# IKr
#
[ikr]
use membrane.V, nernst.E_K
dot(pa) = (p_a_infinity - pa) / tau_pa
    p_a_infinity = 1 / (1 + exp((V + 15 [mV]) / -6 [mV]))
    pa_factor = (V + 20.1376 [mV]) / 22.1996 [mV]
    tau_pa = 0.03118 [s] + 0.21718 [s] * exp(-pa_factor * pa_factor)
        in [s]
pip = 1 / (1 + exp((V + 55 [mV]) / 24 [mV]))
g_Kr = 0.5 [nS]
    in [nS]
i_Kr = g_Kr * pa * pip * (V - E_K)
    in [pA]
    label I_Kr

#
# IKs
#
[iks]
use membrane.V, nernst.E_K
dot(n) = (n_infinity - n) / tau_n
    n_factor = (V - 20 [mV]) / 20 [mV]
    n_infinity = 1 / (1 + exp((V - 19.9 [mV]) / -12.7 [mV]))
    tau_n = 0.7 [s] + 0.4 [s] * exp(-n_factor * n_factor)
        in [s]
g_Ks = 1 [nS]
    in [nS]
i_Ks = g_Ks * n * (V - E_K)
    in [pA]


#
# IK1
#
[ik1]
use membrane.V, nernst.E_K
g_K1 = 3.1 [nS]
    in [nS]
i_K1 = g_K1 * (cleft.K_c / 1 [mM]) ^ 0.4457 * (V - E_K) / (1 + exp(1.5 * (V - E_K + 3.6 [mV]) / phys.RTF))
    in [pA]
    label I_K1

#
# Sarcolemmal calcium pump current
#
[icap]
k_CaP = 0.0002 [mM]
    in [mM]
i_CaP_max = 4 [pA]
    in [pA]
i_CaP = i_CaP_max * intra.Ca_i / (intra.Ca_i + k_CaP)
    in [pA]

#
# Fast sodium current
#
[ina]
use membrane.V, nernst.E_Na
h_factor = 1 / (1 + exp((V + 35.1 [mV]) / 3.2 [mV]))
h_infinity = 1 / (1 + exp((V + 63.6 [mV]) / 5.3 [mV]))
    label ina_h12_inf
dot(h1) = (h_infinity - h1) / tau
    tau = 0.03 [s] * h_factor + 0.0003 [s]
        in [s]
dot(h2) = (h_infinity - h2) / tau
    tau = 0.12 [s] * h_factor + 0.003 [s]
        in [s]
dot(m) = (inf - m) / tau
    label ina_m
    m_factor = (V + 25.57 [mV]) / 28.8 [mV]
    inf = 1 / (1 + exp((V + 27.12 [mV]) / -8.21 [mV]))
    tau = 4.2e-5 [s] * exp(-m_factor * m_factor) + 2.4e-5 [s]
        in [s]
P_Na = 0.0018 [m^3/s (1e-12)]
    in [m^3/s (1e-12)]
i_Na = P_Na * m^3 * (0.9 * h1 + 0.1 * h2) * cleft.Na_c * V * phys.F / phys.RTF * (exp((V - E_Na) / phys.RTF) - 1) / (exp(V / phys.RTF) - 1)
    in [pA]
    label I_Na

#
# Sodium potassium pump
#
[inak]
use membrane.V
use cleft.K_c, intra.Na_i
K_NaK_K = 1 [mM]
    in [mM]
K_NaK_Na = 11 [mM]
    in [mM]
i_NaK = i_NaK_max * K_c / (K_c + K_NaK_K) * Na_i^1.5 / (Na_i^1.5 + K_NaK_Na^1.5) * (V + 150 [mV]) / (V + 200 [mV])
    in [pA]
    label I_NaK
i_NaK_max = 68.55 [pA]
    in [pA]

#
# Ultra rapid potassium current
#
[ikur]
use membrane.V, nernst.E_K
dot(a_ur) = (a_ur_infinity - a_ur) / tau_a_ur
    a_ur_infinity = 1 / (1 + exp(-(V + 6 [mV]) / 8.6 [mV]))
    tau_a_ur = 0.009 [s] / (1 + exp((V + 5 [mV]) / 12 [mV])) + 0.0005 [s]
        in [s]
dot(i_ur) = (i_ur_infinity - i_ur) / tau_i_ur
    i_ur_infinity = 1 / (1 + exp((V + 7.5 [mV]) / 10 [mV]))
    tau_i_ur = 0.59 [s] / (1 + exp((V + 60 [mV]) / 10 [mV])) + 3.05 [s]
        in [s]
g_kur = 2.25 [nS]
    in [nS]
i_Kur = g_kur * a_ur * i_ur * (V - E_K)
    in [pA]
    label I_Kur

#
# Background currents
#
[ib]
use membrane.V, nernst.E_Ca, nernst.E_Na
g_B_Ca = 0.078681 [nS]
    in [nS]
g_B_Na = 0.060599 [nS]
    in [nS]
i_B_Ca = g_B_Ca * (V - E_Ca)
    in [pA]
i_B_Na = g_B_Na * (V - E_Na)
    in [pA]

#
# Reversal potentials
#
[nernst]
E_Na = phys.RTF * log(cleft.Na_c / intra.Na_i)
    in [mV]
E_K = phys.RTF * log(cleft.K_c / intra.K_i)
    in [mV]
E_Ca = phys.RTF / phys.F * log(cleft.Ca_c / intra.Ca_i)
    in [mV]

#
# Intracellular ion concentrations
#
[intra]
dot(Ca_d) = -(ical.i_Ca_L + i_di) / (2 * Vol_d * phys.F)
    in [mM]
dot(Ca_i) = -(ib.i_B_Ca + icap.i_CaP + casr.i_up - (i_di + casr.i_rel + 2 * inaca.i_NaCa)) / (2 * Vol_i * phys.F) - 1 [mM] * cabuf.J_O
    in [mM]
    label Ca_i
dot(K_i) = -(it.i_t + ikur.i_Kur + ik1.i_K1 + iks.i_Ks + ikr.i_Kr - 2 * inak.i_NaK + stimulus.i_Stim * cell.Cm) / (Vol_i * phys.F)
    in [mM]
    label K_i
dot(Na_i) = -(ina.i_Na + ib.i_B_Na + 3 * inaca.i_NaCa + 3 * inak.i_NaK + phi_Na_en) / (Vol_i * phys.F)
    in [mM]
    label Na_i
Vol_d =  1.1768e-4 [nL]
    in [nL]
Vol_i = 0.005884 [nL]
    in [nL]
i_di = (Ca_d - Ca_i) * 2 * Vol_d * phys.F / tau_di
    in [pA]
phi_Na_en = 0 [pA]
    in [pA]
tau_di = 0.01 [s]
    in [s]

#
# Cleft space ion concentrations
#
[cleft]
Ca_b = 1.8 [mM]
    in [mM]
dot(Ca_c) = (Ca_b - Ca_c) / tau_Ca + (ical.i_Ca_L + ib.i_B_Ca + icap.i_CaP - 2 * inaca.i_NaCa) / (2 * Vol_c * phys.F)
    in [mM]
K_b = 5.4 [mM]
    in [mM]
    label K_o
dot(K_c) = (K_b - K_c) / tau_K + (it.i_t + ikur.i_Kur + ik1.i_K1 + iks.i_Ks + ikr.i_Kr - 2 * inak.i_NaK) / (Vol_c * phys.F)
    in [mM]
    label K_c
Na_b = 130 [mM]
    in [mM]
dot(Na_c) = (Na_b - Na_c) / tau_Na + (ina.i_Na + ib.i_B_Na + 3 * inaca.i_NaCa + 3 * inak.i_NaK + intra.phi_Na_en) / (Vol_c * phys.F)
    in [mM]
Vol_c =  8.00224e-4 [nL]
    in [nL]
tau_Ca = 24.7 [s]
    in [s]
tau_K = 10 [s]
    in [s]
tau_Na = 14.3 [s]
    in [s]

#
# Intracellular calcium buffering
#
[cabuf]
J_O = 0.08 * J_O_TC + 0.16 * J_O_TMgC + 0.045 * J_O_C
    in [S/F]
J_O_C = 200000 [m^3/s/mol] * intra.Ca_i * (1 - O_C) - 476 [S/F] * O_C
    in [S/F]
J_O_TC = 78400 [m^3/s/mol] * intra.Ca_i * (1 - O_TC) - 392 [S/F] * O_TC
    in [S/F]
J_O_TMgC = 200000 [m^3/s/mol] * intra.Ca_i * (1 - O_TMgC - O_TMgMg) - 6.6 [S/F] * O_TMgC
    in [S/F]
J_O_TMgMg = 2000 [m^3/s/mol] * Mg_i * (1 - O_TMgC - O_TMgMg) - 666 [S/F] * O_TMgMg
    in [S/F]
Mg_i = 2.5 [mM]
dot(O) = J_O
dot(O_C) = J_O_C
dot(O_TC) = J_O_TC
dot(O_TMgC) = J_O_TMgC
dot(O_TMgMg) = J_O_TMgMg

#
# Calcium handling by the SR
#
[casr]
dot(Ca_rel) = (i_tr - i_rel) / (2 * Vol_rel * phys.F) - 31 [mM] * J_O_Calse
    in [mM]
dot(Ca_up) = (i_up - i_tr) / (2 * Vol_up * phys.F)
    in [mM]
dot(F1) = r_recov * (1 - F1 - F2) - r_act * F1
dot(F2) = r_act * F1 - r_inact * F2
I_up_max = 2800 [pA]
    in [pA]
J_O_Calse = 480 [m^3/s/mol] * Ca_rel * (1 - O_Calse) - 400 [S/F] * O_Calse
    in [S/F]
dot(O_Calse) = J_O_Calse
Vol_rel = 4.41e-5 [nL]
    in [nL]
Vol_up = 0.0003969 [nL]
    in [nL]
alpha_rel = 200000 [m^3*A/mol (1e-12)]
    in [m^3*A/mol (1e-12)]
i_rel = alpha_rel * i_rel_factor * (Ca_rel - intra.Ca_i)
    in [pA]
i_rel_f2 = F2 / (F2 + 0.25)
i_rel_factor = i_rel_f2 * i_rel_f2
i_tr = (Ca_up - Ca_rel) * 2 * Vol_rel * phys.F / tau_tr
    in [pA]
i_up = I_up_max * (intra.Ca_i / k_cyca - k_xcs * k_xcs * Ca_up / k_srca) / ((intra.Ca_i + k_cyca) / k_cyca + k_xcs * (Ca_up + k_srca) / k_srca)
    in [pA]
k_cyca = 0.0003 [mM]
    in [mM]
k_rel_d = 0.003 [mM]
    in [mM]
k_rel_i = 0.0003 [mM]
    in [mM]
k_srca = 0.5 [mM]
    in [mM]
k_xcs = 0.4
r_Ca_d_factor = r_Ca_d_term * r_Ca_d_term * r_Ca_d_term * r_Ca_d_term
r_Ca_d_term = intra.Ca_d / (intra.Ca_d + k_rel_d)
r_Ca_i_factor = r_Ca_i_term * r_Ca_i_term * r_Ca_i_term * r_Ca_i_term
r_Ca_i_term = intra.Ca_i / (intra.Ca_i + k_rel_i)
r_act = 203.8 [S/F] * (r_Ca_i_factor + r_Ca_d_factor)
    in [S/F]
r_inact = 33.96 [S/F] + 339.6 [S/F] * r_Ca_i_factor
    in [S/F]
r_recov = 0.815 [S/F]
    in [S/F]
tau_tr = 0.01 [s]
    in [s]

#
# Physical constants
#
[phys]
R = 8314 [mJ/mol/K]
    in [mJ/mol/K]
T = 306.15 [K]
    in [K]
F = 96487 [C/mol]
    in [C/mol]
RTF = R * T / F
    in [mV]

[[protocol]]
# Level  Start    Length   Period   Multiplier
1.0      0.05     0.0005   1        0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model and protocol, create simulation
m = get_model()
p = get_protocol()
s = myokit.Simulation(m, p)
s.set_tolerance(1e-8, 1e-8)

# Run simulation
d = s.run(1000, log_interval=1, log=['engine.time', 'intra.K_i'])

plt.figure()
plt.plot(d.time(), d['intra.K_i'])
plt.show()

